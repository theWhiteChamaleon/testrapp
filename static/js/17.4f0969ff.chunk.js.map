{"version":3,"file":"static/js/17.4f0969ff.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/List/List.jsx","components/Card/Card.jsx","components/DragAndDrop/DragAndDropStandAlone.jsx","components/Card/cardwithdraganddrop.jsx","components/SearchInput/SearchInput.jsx","hooks/useInterComSearch.js","components/DragAndDrop/DragAndDrop.jsx","components/Loader/Loader.js","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","hooks/useDroppableArea.js","hooks/useRevisions.js","hooks/useToast.js","services/api/refreshService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./List.css\";\r\nimport { makeDraggable } from \"../../utils/helpers\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst List = ({ data, isColumn, onDragStart, onDragEnd }) => {\r\n  const titleRef = useRef(null);\r\n  const initialDraggedData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData.initialDraggedData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (titleRef.current && initialDraggedData) {\r\n      makeDraggable(\r\n        titleRef.current,\r\n        initialDraggedData,\r\n        onDragStart,\r\n        onDragEnd\r\n      );\r\n    }\r\n  }, [data, initialDraggedData, onDragStart, onDragEnd]);\r\n\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className={`d-flex ${isColumn ? \"flex-column\" : \"flex-row\"}`}>\r\n      <h5\r\n        ref={titleRef}\r\n        className={`mb-1 text-start title ${!isColumn ? \"me-2\" : \"\"}`}\r\n      >\r\n        {data.title}\r\n      </h5>\r\n      <ul\r\n        className={`list-group d-flex flex-row flex-sm-row flex-wrap justify-content-between pb-3 pb-md-0 ${\r\n          !isColumn ? \"w-75\" : \"\"\r\n        }`}\r\n      >\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ps-0 pb-0 ${\r\n            !isColumn ? \"d-flex flex-row justify-content-around\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p>\r\n            <b>Type:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.type}>\r\n              {data.type}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <b>Owner:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.owner}>\r\n              {data.owner}\r\n            </span>\r\n          </p>\r\n          {isColumn && (\r\n            <p>\r\n              <b>Maturity State:</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Maturity State\"]}>\r\n                {data[\"Maturity State\"]}\r\n              </span>\r\n            </p>\r\n          )}\r\n        </li>\r\n        {isColumn && (\r\n          <li\r\n            className=\"list-group-item flex-grow-1 text-start mx-0 pt-0\"\r\n            style={{ border: \"0\", paddingLeft: \"0\" }}\r\n          >\r\n            <p>\r\n              <b>Dropped Revision :</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Dropped Revision\"]}>\r\n                {data[\"Dropped Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Latest Released Revision:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Latest Released Revision\"]}\r\n              >\r\n                {data[\"Latest Released Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Collabspace:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Collaborative Space Title\"]}\r\n              >\r\n                {data[\"Collaborative Space Title\"]}\r\n              </span>\r\n            </p>\r\n          </li>\r\n        )}\r\n\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ${\r\n            !isColumn ? \"d-flex flex-row\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\", paddingLeft: \"0\" }}\r\n        >\r\n          {data.type !== \"Document\" && (\r\n            <>\r\n              <p>\r\n                <b>CAD Format:</b>{\" \"}\r\n                <span className=\"list-text\" title={data[\"CAD Format\"]}>\r\n                  {data[\"CAD Format\"]}\r\n                </span>\r\n              </p>\r\n              <p>\r\n                <b>EIN:</b>{\" \"}\r\n                <span className=\"list-text\" title={data.EIN}>\r\n                  {data.EIN}\r\n                </span>\r\n              </p>\r\n            </>\r\n          )}\r\n        </li>\r\n\r\n        <div className=\"d-none d-md-flex align-items-stretch\">\r\n          <div className=\"vr\"></div>\r\n        </div>\r\n\r\n        {/* Horizontal divider after third li on small screens */}\r\n        <div className=\"d-flex d-md-none w-100\">\r\n          <hr className=\"w-100\" />\r\n        </div>\r\n\r\n        <li\r\n          className=\"list-group-item flex-grow-1 text-start mx-0\"\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p className=\"description-container\" title={data.Description}>\r\n            {data.Description}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { Image, Card, CardBody } from \"react-bootstrap\";\r\nimport List from \"../List/List\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CardComponent = ({ data, onDragStart, onDragEnd }) => {\r\n  const [isColumn, setIsColumn] = useState(true);\r\n\r\n  const toggleFlexDirection = () => {\r\n    setIsColumn(!isColumn);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"d-flex flex-row mt-4 border-0 \" style={{ width: \"100%\" }}>\r\n      <div className=\"pb-3 d-none d-md-block me-5 ms-4\">\r\n        <Card.Img\r\n          className={`${\r\n            !isColumn ? \"image-resize img-thumbnail\" : \"img-thumbnail\"\r\n          } `}\r\n          src={data.imageURL} // Use dynamic image URL from data\r\n          alt=\"Card image\"\r\n        />\r\n      </div>\r\n      <CardBody className={`${!isColumn ? \"p-0 layout-change\" : \"p-0\"} `}>\r\n        <List\r\n          data={data}\r\n          isColumn={isColumn}\r\n          onDragStart={onDragStart}\r\n          onDragEnd={onDragEnd}\r\n        />\r\n      </CardBody>\r\n      <button\r\n        className=\"me-2 p-0 btn btn-link accordion-toggle\"\r\n        onClick={toggleFlexDirection}\r\n      >\r\n        {/* <FontAwesomeIcon\r\n          icon={faAngleUp}\r\n          size=\"xs\"\r\n          style={{ color: \"#212121\" }}\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        /> */}\r\n\r\n        <Image\r\n          src=\"https://khanfarzan17.github.io/tedting-revision-float/images/arrow.png\"\r\n          alt=\"downArrow\"\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        />\r\n      </button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropStandAlone = () => {\r\n  const { initializeDroppableArea } = useDroppableArea();\r\n  const hasInitializedDroppable = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!hasInitializedDroppable.current) {\r\n      console.log(\"[DragAndDrop] 🔄 Initializing droppable area...\");\r\n      initializeDroppableArea();\r\n      hasInitializedDroppable.current = true; // ✅ Prevent multiple calls\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <> \r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropStandAlone;\r\n","import React, { useState } from \"react\";\r\nimport DragAndDropStandAlone from \"../DragAndDrop/DragAndDropStandAlone\";\r\nimport CardComponent from \"./Card\";\r\n\r\nconst CardWithDragAndDrop = ({ data }) => {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const handleDragStart = () => {\r\n    console.log(\"handleDragStart called\"); \r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleDragEnd = () => {\r\n    console.log(\"handleDragEnd called\"); \r\n    console.log(\"Before setIsDragging(false) - isDragging:\", isDragging); \r\n    setIsDragging(false);\r\n    console.log(\"After setIsDragging(false) - isDragging:\", isDragging);\r\n  };\r\n  return (\r\n    <div className={`card-with-drag-and-drop ${isDragging ? \"dragging\" : \"\"}`}>\r\n      <DragAndDropStandAlone />\r\n      <CardComponent\r\n        data={data}\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardWithDragAndDrop;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import React, { useEffect } from \"react\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = useDroppableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div className=\"cell-content\">{cellContent}</div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  widgetType,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // const { updateTableData } = meta;\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          {...{\r\n            checked: row.getIsSelected(),\r\n            onChange: row.getToggleSelectedHandler(),\r\n          }}\r\n        />\r\n      ),\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    enableRowSelection: true,\r\n    defaultColumn: {\r\n      size: 159,\r\n      minSize: 45,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    // meta: {\r\n    //   updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    // },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    // Check if the widgetType is \"Revision_FLoat_Widget\" or \"Plantassignment\"//\r\n\r\n    // Otherwise, use handleExportExcel with the default file name \"table-data.xlsx\"//\r\n    console.log(\"Export buttton clicked\");\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plantassignment\") {\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 &&\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction, setLoading } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useRevisions from \"./useRevisions\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useDroppableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Fetch Revisions and Parents in parallel\r\n          const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n          const [revisionParentData] = await Promise.all([\r\n            fetchRevisionsAndParents(\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              relativePath\r\n            ),\r\n          ]);\r\n          // Dispatch all updates together (batching updates)\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n              parentDetails: revisionParentData || [],\r\n            })\r\n          );\r\n          console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useDroppableArea;\r\n","import useToast from \"../hooks/useToast\";\r\n\r\nimport api from \"../utils/api\"; // Import axios instance\r\nimport { MSG_REPLACE_SUCCESS, MSG_REPLACE_ERROR } from \"../utils/toastMessages\";\r\n\r\nconst useRevisions = () => {\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const fetchRevisionsAndParents = async (\r\n    objectId,\r\n    objectType,\r\n    relativePath\r\n  ) => {\r\n    if (!relativePath) {\r\n      console.error(\"[Fetch Revisions] ❌ Missing relative path.\");\r\n      return;\r\n    }\r\n\r\n    const parentURL = `/revFloat/getParents`;\r\n\r\n    try {\r\n      // Use the axios instance to make the POST request\r\n      const response = await api.post(parentURL, {\r\n        data: {\r\n          id: objectId,\r\n          type: objectType,\r\n          relativePath: relativePath,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const parentDetails = response.data;\r\n\r\n        // 🚀 Return data instead of dispatching\r\n        return parentDetails;\r\n      } else {\r\n        throw new Error(\r\n          `[Fetch Revisions] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Fetch Revisions] ❌ Error occurred:\", error);\r\n      return null; // Ensure it returns null on error\r\n    }\r\n  };\r\n\r\n  const replaceRevisions = async (selectedParents, droppedData, userEmail) => {\r\n    const parentURL = `/revFloat/floatRevisions`; // Use relative path for axios\r\n\r\n    try {\r\n      // Make the POST request to the replacement API\r\n      const response = await api.post(parentURL, {\r\n        SelectedParents: selectedParents,\r\n        DroppedData: droppedData,\r\n        userEmail: userEmail,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful replacement\r\n        console.log(\"Replacement successful:\", response.data);\r\n        showSuccessToast(MSG_REPLACE_SUCCESS); // Show success toast\r\n        // You might want to update the Redux store or refetch data here\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(\r\n          `[Replacement API] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during replacement:\", error);\r\n      showErrorToast(MSG_REPLACE_ERROR); // Show error toast\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return { fetchRevisionsAndParents, replaceRevisions };\r\n};\r\n\r\nexport default useRevisions;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","data","isColumn","onDragStart","onDragEnd","titleRef","useRef","initialDraggedData","useSelector","state","droppedObject","droppedObjectData","useEffect","current","makeDraggable","concat","ref","border","owner","paddingLeft","_Fragment","EIN","Description","setIsColumn","useState","Card","Img","imageURL","CardBody","List","toggleFlexDirection","Image","DragAndDropStandAlone","initializeDroppableArea","useDroppableArea","hasInitializedDroppable","console","log","isDragging","setIsDragging","CardComponent","handleDragStart","handleDragEnd","onSearch","searchText","setSearchText","inputRef","FontAwesomeIcon","icon","faMagnifyingGlass","handleSearchIconClick","trim","InputGroup","Form","Control","value","onChange","event","newSearchText","target","onKeyDown","key","placeholder","handleClearClick","focus","useInterComSearch","socket","setSocket","InterCom","setInterCom","async","interComInstance","loadInterCom","error","loadData","disconnect","performSearch","useCallback","searchOpts","onObjectsSelected","_window$widget","warn","socketName","Date","toISOString","replace","newSocket","Socket","dispatchRetryInternal","subscribeServer","widgetId","window","widget","id","finalSearchOpts","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","DragAndDropComponent","handleDrop","SearchInput","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","length","objectId","objectType","Loader","header","columns","table","isFixed","column","isPinned","getState","columnPinning","left","includes","sortable","useSortable","attributes","listeners","setNodeRef","transform","opacity","position","top","CSS","Transform","toString","transition","getSize","zIndex","cursor","backgroundColor","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","getIsResizing","cell","getIsPinned","cellContent","getValue","getWidgetStorageKey","widgetType","editable","meta","dispatch","useDispatch","tableData","setTableData","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","isScrolled","setIsScrolled","handleScroll","e","scrollTop","tableContainer","addEventListener","removeEventListener","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","getToggleAllRowsSelectedHandler","_ref3","row","getIsSelected","getToggleSelectedHandler","_ref4","handleEditCell","rowIndex","columnId","updatedData","index","updateTableData","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","useReactTable","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","enableRowSelection","defaultColumn","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","original","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","columnSizingInfo","columnSizing","CustomButton","handleSelectAll","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","showErrorToast","useToast","fetchRevisionsAndParents","useRevisions","isDropped","loading","fetchObjectDetails","objectDetailsResult","getDroppedObjectDetails","dataItems","success","_dataItems$","_dataItems$2","relativePath","cardData","revisionParentData","Promise","all","setDroppedObjectData","parentDetails","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","_dataItems$3","MSG_INVALID_OBJECT_TYPE","setIsDroppedAction","setTimeout","MSG_UNEXPECTED_ERROR","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","showSuccessToast","response","api","post","status","Error","replaceRevisions","selectedParents","droppedData","userEmail","SelectedParents","DroppedData","MSG_REPLACE_SUCCESS","MSG_REPLACE_ERROR","message","showToast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","Bounce","otherOptions","toast","options","arguments","undefined","showInfoToast","showWarningToast","refreshWidgetData"],"sourceRoot":""}